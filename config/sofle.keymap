/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define MAC     0
#define WIN     1
#define GAME    2
#define LOGIC   3
#define LOWER   4
#define RAISE   5
#define NUM     6


&left_encoder {
    steps = <80>;
};

&right_encoder {
    steps = <80>;
};

/ {
    sensors {
        triggers-per-rotation = <20>;
    };
    behaviors {
        th: taphold {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP HOLD";
            #binding-cells = <2>;
            tapping-term-ms = <170>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        smart_gresc: smart_gresc {
            compatible = "zmk,behavior-mod-morph";
            label = "smart_gresc";
            #binding-cells = <0>;
            bindings = <&kp ESC>, <&sub_gresc>;
            mods = <(MOD_LGUI|MOD_LSFT)>;
            keep-mods = <(MOD_LGUI|MOD_LSFT)>;
        };
        sub_gresc: sub_gresc {
            compatible = "zmk,behavior-mod-morph";
            label = "sub_gresc";
            #binding-cells = <0>;
            bindings = <&kp GRAVE>, <&kp ESC>;
            mods = <(MOD_LALT|MOD_LCTL)>;
            keep-mods = <(MOD_LALT|MOD_LCTL)>;
        };
        slt: spacebar_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "SPACE_LAYER_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };
        tnpt: tab_numpad_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "TAB_NUMPAD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <170>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&mo>, <&kp>;
        };
    };
    macros {
        hpr: hyper {
            label = "hyper";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
                ;
        };
        pwr: powerclaw {
            label = "powerclaw";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LCTRL &kp LALT &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LCTRL &kp LALT &kp LGUI>
                ;
        };
        meh: meh {
            label = "meh";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
                , <&macro_pause_for_release>
                , <&macro_release &kp LSHFT &kp LCTRL &kp LALT &kp LGUI>
                ;
        };
        macbck: macbck {
            label = "macbck";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp LBKT>
                , <&macro_release &kp LGUI>
                ;
        };
        macfwd: macfwd {
            label = "macfwd";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            bindings
                = <&macro_press &kp LGUI>
                , <&macro_tap &kp RBKT>
                , <&macro_release &kp LGUI>
                ;
        };
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0";
            #binding-cells = <0>;
            tapping-term-ms = <170>;
            bindings = <&hpr>, <&pwr>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&smart_gresc &kp N1 &kp N2 &kp N3   &kp N4    &kp N5                      &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp BSPC
&tnpt NUM TAB &kp Q &kp W  &kp E    &kp R     &kp T                       &kp Y  &kp U     &kp I     &kp O    &kp P    &th EQUAL MINUS
&td0      &kp A  &kp S     &kp D    &kp F     &kp G                       &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&kp LSHFT &kp Z  &kp X     &kp C    &kp V     &kp B  &kp C_MUTE &none     &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp DEL
                 &kp LCTRL &kp LALT &kp LGUI &kp SPACE &slt LOWER ENTER  &kp ENTER &slt RAISE SPACE  &kp BSLH &kp LBKT  &kp RBKT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp DOT COMMA>;
        };
        windows_layer {
            bindings = <
&smart_gresc &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                      &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp BSPC
&lt 3 TAB   &kp Q  &kp W    &kp E    &kp R     &kp T                       &kp Y  &kp U     &kp I     &kp O    &kp P    &th EQUAL MINUS
&td0    &kp A  &kp S    &kp D    &kp F     &kp G                         &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&kp LSHFT   &kp Z  &kp X    &kp C    &kp V     &kp B  &kp C_MUTE &none     &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp DEL
                 &kp LCTRL &kp LGUI &kp LALT &kp SPACE &slt LOWER ENTER  &kp ENTER &slt RAISE SPACE &kp BSLH &kp LBKT  &kp RBKT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
        gaming_layer {
            bindings = <
&smart_gresc &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                      &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp BSPC
&lt 3 TAB   &kp Q  &kp W    &kp E    &kp R     &kp T                       &kp Y  &kp U     &kp I     &kp O    &kp P    &th EQUAL MINUS
&td0    &kp A  &kp S    &kp D    &kp F     &kp G                         &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&kp LSHFT   &kp Z  &kp X    &kp C    &kp V     &kp B  &kp C_MUTE &none     &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp DEL
                 &kp LCTRL &kp LALT &kp SPACE &kp SPACE &slt LOWER ENTER  &kp ENTER &slt RAISE SPACE  &kp BSLH &kp LBKT  &kp RBKT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
        logic_layer {
            bindings = <
&smart_gresc &kp N1 &kp N2   &kp N3   &kp N4    &kp N5                      &kp N6 &kp N7    &kp N8    &kp N9   &kp N0   &kp BSPC
&lt 3 TAB   &kp Q  &kp W    &kp E    &kp R     &kp T                       &kp Y  &kp U     &kp I     &kp O    &kp P    &th EQUAL MINUS
&td0    &kp A  &kp S    &kp D    &kp F     &kp G                         &kp H  &kp J     &kp K     &kp L    &kp SEMI &kp SQT
&kp LSHFT   &kp Z  &kp X    &kp C    &kp V     &kp B  &kp C_MUTE &none     &kp N  &kp M     &kp COMMA &kp DOT  &kp FSLH &kp DEL
                 &kp LCTRL &kp LALT &kp LGUI &kp SPACE &slt LOWER ENTER  &kp ENTER &slt RAISE SPACE &kp BSLH &kp LBKT  &kp RBKT
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp DOT COMMA>;
        };
        lower_layer {
            bindings = <
&kp GRAVE &kp F1    &kp F2    &kp F3      &kp F4    &kp F5                    &kp F6    &kp F7    &kp F8    &kp F9    &kp F10   &kp F11
&trans    &trans    &trans    &trans      &trans    &kp P                     &trans    &trans    &trans    &trans    &trans    &kp F12
&trans    &trans    &kp M     &kp DEL     &kp COMMA &kp DOT                   &trans    &trans    &trans    &trans    &trans    &trans    
&trans    &trans    &kp BSLH  &trans      &kp LBRC  &kp RBRC  &trans   &trans &kp LBKT  &kp RBKT  &trans    &trans    &trans    &trans   
                    &trans    &trans      &trans    &trans    &trans   &trans &trans    &to MAC   &to WIN  &to GAME
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            bindings = <
&bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4             &trans    &trans    &trans   &trans    &trans  &kp DEL
&trans     &trans       &trans       &kp K_CMENU  &trans       &trans                   &trans    &macbck  &kp UP   &macfwd   &trans  &trans
&trans     &trans       &trans       &trans       &trans       &kp PG_UP                &trans    &kp LEFT  &kp DOWN &kp RIGHT &trans  &trans   
&trans     &trans       &trans       &trans       &trans       &kp PG_DN &trans &trans  &trans    &kp F13   &trans   &trans    &trans  &trans
                        &trans       &trans       &trans       &trans  &trans   &trans  &trans    &trans    &trans   &trans
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
        numpad_layer {
            bindings = <
&trans     &trans       &trans       &trans       &trans       &trans                   &kp HOME  &kp N7    &kp N8   &kp N9    &kp KP_NUM    &trans
&trans     &trans       &trans       &trans       &trans       &trans                   &kp END   &kp N4    &kp N5   &kp N6    &kp KP_PLUS   &trans
&trans     &trans       &trans       &trans       &trans       &trans                   &kp PG_UP &kp N1    &kp N2   &kp N3    &kp KP_ENTER  &trans   
&trans     &trans       &trans       &trans       &trans       &trans  &trans   &trans  &kp PG_DN &kp N0    &kp N0   &kp DOT   &kp FSLH      &trans
                        &trans       &trans       &trans       &trans  &trans   &trans  &trans    &kp KP_ENTER &kp KP_ENTER &kp KP_ENTER
            >;

            sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp PG_UP PG_DN>;
        };
    };
};
